import argparse
import ipaddress
import time
import scapy.all as scapy

parser = argparse.ArgumentParser(description="IP tracerouting Python script")
parser.add_argument('-t','--target_ip_address', help="Target IP Address to be tracerouted")
parser.add_argument('-m','--max_hop_limit',type=int,help="Maximum hop Limit")

#Get Arguments
args = parser.parse_args()
target_ip_address = args.target_ip_address
max_hop_limit = args.max_hop_limit

print(target_ip_address,max_hop_limit)

#validate ip address
def is_valid_ip(address):
    try:
        ipaddress.ip_address(address)
        return True
    except ValueError:
        return False

if(is_valid_ip(target_ip_address) == False):
    print("Invalid IP Address")
    exit(1)

#TTL initialization
TTL = 1
print("IP Tracerouting start...")
T1 = time.time()
while (TTL <= max_hop_limit):
    #construct ICMP packet (IP header + ICMP header)
    ICMP_PKT = scapy.IP(dst=target_ip_address,ttl=TTL)/scapy.ICMP()
    #send ICMP packet
    ans = scapy.sr1(ICMP_PKT,timeout=3,retry=1,verbose=False)
    #valid response
    if(isinstance(ans,type(None))==False):
        #ICMP TTL expire
        if (ans[1].type == 11 and ans[1].code == 0):
            print("router",ans[0].src," | TTL:",TTL)
            TTL += 1
        #ICMP echo reply
            if(ans[1].type == 0):
                print("router",target_ip_address," | TTL:",TTL)
                break
        #no response is received
    else:
        print("Unknown router"," | TTL:",TTL)
        TTL += 1

T2 = time.time()
print("IP Tracerouting done in", T2 - T1, "seconds")